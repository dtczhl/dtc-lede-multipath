Index: backports-4.14-rc2-1/net/dtc/Makefile
===================================================================
--- /dev/null
+++ backports-4.14-rc2-1/net/dtc/Makefile
@@ -0,0 +1,2 @@
+
+obj-y += dtc_debugfs.o
Index: backports-4.14-rc2-1/net/dtc/dtc_debugfs.c
===================================================================
--- /dev/null
+++ backports-4.14-rc2-1/net/dtc/dtc_debugfs.c
@@ -0,0 +1,324 @@
+#include "dtc_debugfs.h"
+
+/* main directory */
+static struct dentry *main_dir;
+static u8 nLogFile = 0; // how many log files we need
+static u8 ratio_long2int = 0; // 
+static u8 ratio_int2byte = 0;
+static u8 ratio_long2byte = 0; // 
+
+/* enable */
+static struct dentry *file_enable;
+u32 dtc_debugfs_enable = 0;
+
+/* timestamp */
+static struct dentry *file_time_loc;
+u32 dtc_debugfs_time_loc = 0;
+static struct timeval timestamp1; // split, send path? 
+static struct timeval timestamp2; //		recv path?
+
+/* target */
+static struct dentry *file_target;
+static char target_ip_port[24] = "1.1.1.1 1\n";
+u32 dtc_debugfs_target_ip = 0;
+u16 dtc_debugfs_target_port = 0;
+
+/* info */
+static struct dentry *file_info;
+#define INFO_BUF_SIZE   1024
+static u8 info_buf[INFO_BUF_SIZE]; // make it simple, output static info only
+static u64 info_buf_pos = 0;				// otherwise, use log file
+
+/* log1 in binary format */
+static struct dentry *file_log1;
+static const u64 log1_buf_size = 40 * 1024 * 1024; // change this to be big enough
+static u64 log1_buf_pos = 0;
+static struct debugfs_blob_wrapper log1_blob;
+
+/* log2 in binary format */
+static struct dentry *file_log2;
+static const u64 log2_buf_size = 40 * 1024 * 1024; // change this to be big enough
+static u64 log2_buf_pos = 0;
+static struct debugfs_blob_wrapper log2_blob;
+
+/* -------- implementation -------- */
+
+/* ---- info ---- */
+void dtc_debugfs_add_info(char *pInfo){
+	if (info_buf_pos + strlen(pInfo) >= INFO_BUF_SIZE){
+		return; // need improve
+	}
+
+	memcpy(info_buf + info_buf_pos, pInfo, strlen(pInfo));
+	info_buf_pos += strlen(pInfo);
+	return; 
+}
+
+static ssize_t info_read_file(struct file *file, char __user *user_buf,
+        size_t count, loff_t *ppos){
+    /*
+	int buf_len = snprintf(info_buf, INFO_BUF_SIZE, // !!! change INFO_BUF_SIZE correspondingly
+            "HZ: %-4d\n"
+            , HZ);
+	*/
+    return simple_read_from_buffer(user_buf, count, ppos, info_buf, info_buf_pos);
+}
+static struct file_operations info_fops = {
+    .read = info_read_file,
+};
+
+/* ---- target ---- */
+static ssize_t target_read_file(struct file *file, char __user *user_buf,
+        size_t count, loff_t *ppos){
+    return simple_read_from_buffer(user_buf, count, ppos, 
+            target_ip_port, strlen(target_ip_port));
+}
+static ssize_t target_write_file(struct file *file, const char __user *user_buf,
+        size_t count, loff_t *ppos){
+    int i = 0;
+    int substr_index = 0;
+    int sub_ip = 0;
+    u32 ip_temp = 0;
+    u16 port_temp = 0;
+    
+    if (count >= sizeof(target_ip_port)) // length error
+        return -EINVAL;
+    if (simple_write_to_buffer(target_ip_port, sizeof(target_ip_port), 
+                ppos, user_buf, count) != count)
+        return -EINVAL;
+
+    for (i = 0; i < count; i++){
+        if (target_ip_port[i] >= '0' && target_ip_port[i] <= '9'){ // number
+            if (substr_index == 0){
+                sub_ip = 10*sub_ip + (target_ip_port[i]-'0');
+            } else if (substr_index == 1){
+                port_temp = 10*port_temp + (target_ip_port[i]-'0');
+            }
+        } else if (target_ip_port[i] == '.'){ // delimiter in ip
+            ip_temp = (ip_temp << 8) + sub_ip;
+            sub_ip = 0;
+        } else if (target_ip_port[i] == ' '){ // delimiter between ip and port
+            ip_temp = (ip_temp << 8) + sub_ip;
+            sub_ip = 0;
+            substr_index++;
+        }
+    }
+    
+    dtc_debugfs_target_ip = htonl(ip_temp);
+    dtc_debugfs_target_port = htons(port_temp);
+    
+    /* rewind to buffer beginning */
+    if (nLogFile >= 1){
+        log1_buf_pos = 0;
+        log1_blob.size = 0;
+    }
+    if (nLogFile >= 2){
+        log2_buf_pos = 0;
+        log2_blob.size = 0;
+    }
+    
+    return count;
+}
+static struct file_operations target_fops = {
+    .read = target_read_file,
+    .write = target_write_file,
+};
+
+
+
+
+/* initialization */
+int dtc_init_debugfs(char *dirname, int buffer_num){
+    /* main directory */
+    main_dir = debugfs_create_dir(dirname, 0);
+    if (!main_dir){
+        printk(KERN_ALERT "dtc: main dir failed!\n");
+        return -1;
+    }
+    /* enable */
+    file_enable = debugfs_create_u32("enable", 0666, main_dir, 
+            &dtc_debugfs_enable);
+    if (!file_enable){
+        printk(KERN_ALERT "dtc: enable file failed!\n");
+        return -1;
+    }
+    /* timestamp */
+    file_time_loc = debugfs_create_u32("timeLoc", 0666, main_dir,
+            &dtc_debugfs_time_loc);
+    if (!file_time_loc){
+        printk(KERN_ALERT "dtc: timeLoc file failed!\n");
+        return -1;
+    }
+    /* target */
+    file_target = debugfs_create_file("target", 0666, main_dir, NULL,
+            &target_fops);
+    if (!file_target){
+        printk(KERN_ALERT "dtc: target file failed!\n");
+        return -1;
+    }
+    /* info */
+    file_info = debugfs_create_file("info", 04444, main_dir, NULL,
+            &info_fops);
+    if (!file_info){
+        printk(KERN_ALERT "dtc: info file failed!\n");
+        return -1;
+    }
+
+	/* ---- other main initialization --- */
+    nLogFile = buffer_num;
+	ratio_long2int = (u8) (sizeof(long) / sizeof(int));
+	ratio_long2byte = (u8) sizeof(long);
+	ratio_int2byte = sizeof(int);
+
+	/* add info */
+	dtc_debugfs_add_info("HZ=Something\n");
+
+	/* initialize log files at below */
+    if (nLogFile == 0) return 0;
+    
+	/* log1 */
+    log1_blob.data = vmalloc(log1_buf_size);
+    log1_blob.size = 0;
+    file_log1 = debugfs_create_blob("log1", 0444, main_dir,
+            &log1_blob);
+    if (!file_log1){
+        printk(KERN_ALERT "dtc: log1 file failed!\n");
+        return -1;
+    }
+    if (nLogFile == 1) return 0;
+
+    /* log2 */
+    log2_blob.data = vmalloc(log2_buf_size);
+    log2_blob.size = 0;
+    file_log2 = debugfs_create_blob("log2", 0444, main_dir,
+            &log2_blob);
+    if (!file_log2){
+        printk(KERN_ALERT "dtc: log2 file failed!\n");
+        return -1;
+    }
+    if (nLogFile == 2) return 0;
+
+    return 0;
+}
+
+/* destructor */
+void dtc_cleanup_debugfs(void){
+    debugfs_remove_recursive(main_dir);
+    return;
+}
+
+/* log1 */
+// format: length(4) timeval(long+long) data
+void dtc_debugfs_log1(u8 *pData, u32 length){
+	if (log1_buf_pos + length + 4 + 2 * ratio_long2byte // length timeval
+			>= log1_buf_size) return; // run out buffer, simply return, need improve
+	
+	memcpy((u8*)log1_blob.data+log1_buf_pos, &length, 4); // length
+	log1_buf_pos += 4;
+	do_gettimeofday(&timestamp1);
+	memcpy((u8*)log1_blob.data+log1_buf_pos, &timestamp1, 2*ratio_long2byte); // timestamp: 2 long
+	log1_buf_pos += 2*ratio_long2byte;
+	memcpy((u8*)log1_blob.data+log1_buf_pos, pData, length);
+	log1_buf_pos += length;
+	log1_blob.size = log1_buf_pos;
+}
+
+/* log2 */
+// format: length(4) timeval(long+long) data
+void dtc_debugfs_log2(u8 *pData, u32 length){
+	if (log2_buf_pos + length + 4 + 2 * ratio_long2byte // timeval
+			>= log2_buf_size) return; // run out buffer, simply return, need improve
+	
+	memcpy((u8*)log2_blob.data+log2_buf_pos, &length, 4);
+	log2_buf_pos += 4;
+	do_gettimeofday(&timestamp2);
+	memcpy((u8*)log2_blob.data+log2_buf_pos, &timestamp2, 2*ratio_long2byte); // timestamp: 2 long
+	log2_buf_pos += 2*ratio_long2byte;
+	memcpy((u8*)log2_blob.data+log2_buf_pos, pData, length);
+	log2_buf_pos += length;
+	log2_blob.size = log2_buf_pos;
+}
+
+
+/* timestamp1 -> log1 */  
+/*
+#define TIME_MSG_SIZE    (DTC_DEC_32 + 1 + DTC_DEC_64 + 1 + DTC_DEC_64 + 2 )
+static u8 time_msg[TIME_MSG_SIZE];
+static u32 time_msg_len = 0; 
+void dtc_log_time(u32 time_loc){
+    // time_loc time_sec time_usec
+   
+    if (log1_buf_pos + TIME_MSG_SIZE >= log1_buf_size) return;
+
+    do_gettimeofday(&timestamp);
+    time_msg_len = snprintf(time_msg, TIME_MSG_SIZE, "%u %lu %lu\n",
+            time_loc, timestamp.tv_sec, timestamp.tv_usec);
+    memcpy((char*)log1_blob.data+log1_buf_pos, time_msg, time_msg_len);
+    
+    log1_buf_pos += time_msg_len;
+    log1_blob.size = log1_buf_pos;
+    return;
+}
+// append data
+#define U32_MSG_SIZE    ( DTC_DEC_32 + 2 )
+static u8 u32_msg[U32_MSG_SIZE];
+static u32 u32_msg_len; 
+void dtc_log_time_u32(u32 data){
+   if (log1_buf_pos + U32_MSG_SIZE >= log1_buf_size) return;
+    u32_msg_len = snprintf(u32_msg, U32_MSG_SIZE, "%u\n",
+            ntohl(data));
+    memcpy((char*)log1_blob.data+log1_buf_pos, u32_msg, u32_msg_len);
+
+    log1_buf_pos += u32_msg_len;
+    log1_blob.size = log1_buf_pos;
+    return;
+}
+// append data
+#define INT_MSG_SIZE    ( DTC_DEC_32 + 2 )
+static u8 int_msg[INT_MSG_SIZE];
+static u32 int_msg_len;
+void dtc_log_buffer_size(int data){
+    if (log1_buf_pos + INT_MSG_SIZE >= log1_buf_size) return;
+    int_msg_len = snprintf(int_msg, INT_MSG_SIZE, "%u\n",
+            data);
+    memcpy((char*)log1_blob.data+log1_buf_pos, int_msg, int_msg_len);
+
+    log1_buf_pos += int_msg_len;
+    log1_blob.size = log1_buf_pos;
+    return;
+}
+*/
+/* timestamp -> log2 */  
+/*
+#define TIME_MSG2_SIZE    (DTC_DEC_32 + 1 + DTC_DEC_64 + 1 + DTC_DEC_64 + 2 )
+static u8 time_msg2[TIME_MSG2_SIZE];
+static u32 time_msg2_len = 0; 
+void dtc_log2_time(u32 time_loc){
+    // time_loc time_sec time_usec
+   
+    if (log2_buf_pos + TIME_MSG2_SIZE >= log2_buf_size) return;
+
+    do_gettimeofday(&timestamp2);
+    time_msg2_len = snprintf(time_msg2, TIME_MSG2_SIZE, "%u %lu %lu\n",
+            time_loc, timestamp2.tv_sec, timestamp2.tv_usec);
+    memcpy((char*)log2_blob.data+log2_buf_pos, time_msg2, time_msg2_len);
+    
+    log2_buf_pos += time_msg2_len;
+    log2_blob.size = log2_buf_pos;
+    return;
+}
+// append data
+#define U32_MSG2_SIZE    ( DTC_DEC_32 + 2 )
+static u8 u32_msg2[U32_MSG2_SIZE];
+static u32 u32_msg2_len; 
+void dtc_log2_time_u32(u32 data){
+   if (log2_buf_pos + U32_MSG2_SIZE >= log2_buf_size) return;
+    u32_msg2_len = snprintf(u32_msg2, U32_MSG2_SIZE, "%u\n",
+            ntohl(data));
+    memcpy((char*)log2_blob.data+log2_buf_pos, u32_msg2, u32_msg2_len);
+
+    log2_buf_pos += u32_msg2_len;
+    log2_blob.size = log2_buf_pos;
+    return;
+}
+*/
Index: backports-4.14-rc2-1/net/dtc/dtc_debugfs.h
===================================================================
--- /dev/null
+++ backports-4.14-rc2-1/net/dtc/dtc_debugfs.h
@@ -0,0 +1,81 @@
+#ifndef _DTC_DEBUGFS_H_
+#define _DTC_DEBUGFS_H_
+
+/* 
+*	Note: Each module/package has its own variable space (they do not share).
+*
+*	Huanle Zhang
+*	www.huanlezhang.com
+*/
+
+#include <linux/debugfs.h>
+#include <linux/kernel.h>
+#include <linux/vmalloc.h>
+#include <linux/fs.h>
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+#include <linux/ip.h>
+#include <linux/string.h>
+#include <linux/timekeeping.h>
+#include <linux/ieee80211.h>
+
+/* enable protocol: up to 32 labels */
+#define DTC_ENABLE_TCP  ( 1 << 0 )
+#define DTC_ENABLE_UDP  ( 1 << 1 )
+
+/* timekeeping location: up to 32 labels */
+#define DTC_TIME_SOCK_SEND	( 1 << (0+0) )
+#define DTC_TIME_SOCK_RECV	( 1 << (16+0) )
+#define DTC_TIME_TCP_SEND	( 1 << (0+1) )
+#define DTC_TIME_TCP_RECV	( 1 << (16+1) )
+#define DTC_TIME_UDP_SEND	( 1 << (0+2) )
+#define DTC_TIME_UDP_RECV	( 1 << (16+2) )
+#define DTC_TIME_MAC_SEND	( 1 << (0+3) )
+#define DTC_TIME_MAC_RECV	( 1 << (16+3) )
+#define DTC_TIME_ATH_SEND	( 1 << (0+4) )
+#define DTC_TIME_ATH_RECV	( 1 << (16+4) )
+#define DTC_TIME_IP_SEND	( 1 << (0+5) )
+#define DTC_TIME_IP_RECV	( 1 << (16+5) )
+
+/* length: decimals to string literals */
+#define DTC_DEC_32  10
+#define DTC_DEC_64  20
+
+/* variables */
+extern u32 dtc_debugfs_enable;		// bind to DTC_ENABLE_
+extern u32 dtc_debugfs_time_loc;	// bind to DTC_TIME_
+extern u32 dtc_debugfs_target_ip;	
+extern u16 dtc_debugfs_target_port;
+
+/* ---- functions ---- */
+
+int dtc_init_debugfs(char *dirname, int buff_num);
+void dtc_cleanup_debugfs(void);
+
+/* 
+	Two logs should be enough without contention. 
+		One for send path
+		The other for receive path
+*/
+void dtc_debugfs_log1(u8 *pData, u32 length);
+void dtc_debugfs_log2(u8 *pData, u32 length);
+
+void dtc_debugfs_add_info(char *pInfo);
+
+/* ---- inline functions ---- */
+
+/* point to udp data payload */
+static inline unsigned char *dtc_debugfs_skb_udp_payload(const struct sk_buff *skb){
+    return skb_transport_header(skb) + 8;
+}
+
+/* is ieee80211 data frame ? */
+static inline int dtc_debugfs_is_ieee80211_data(const struct sk_buff *skb, const __le16 frame_control){
+// udp + ip + ieee80211
+#define MIN_FRAME ( 8 + 20 + 10 )
+    if (skb->data_len < MIN_FRAME ) return 0;
+    return (frame_control & 0x000F) == IEEE80211_FTYPE_DATA;
+}
+
+
+#endif
Index: backports-4.14-rc2-1/net/Makefile
===================================================================
--- backports-4.14-rc2-1.orig/net/Makefile
+++ backports-4.14-rc2-1/net/Makefile
@@ -10,6 +10,8 @@ obj-$(CONFIG_NET)		:= socket.o core/
 tmp-$(CONFIG_COMPAT) 		:= compat.o
 obj-$(CONFIG_NET)		+= $(tmp-y)
 
+# dtc
+obj-y	+= dtc/
 # LLC has to be linked before the files in net/802/
 obj-$(CONFIG_LLC)		+= llc/
 obj-$(CONFIG_NET)		+= ethernet/ 802/ sched/ netlink/ bpf/
Index: backports-4.14-rc2-1/net/mac80211/main.c
===================================================================
--- backports-4.14-rc2-1.orig/net/mac80211/main.c
+++ backports-4.14-rc2-1/net/mac80211/main.c
@@ -33,6 +33,9 @@
 #include "led.h"
 #include "debugfs.h"
 
+//dtc
+#include "../dtc/dtc_debugfs.h"
+
 void ieee80211_configure_filter(struct ieee80211_local *local)
 {
 	u64 mc;
@@ -1268,6 +1271,13 @@ static int __init ieee80211_init(void)
 	if (ret)
 		goto err_netdev;
 
+	//dtc
+	if (dtc_init_debugfs("dtcMac", 2) == 0){
+		printk(KERN_ALERT "dtc: in ieee80211_init, init_debugfs succeeds\n");
+	} else {
+		printk(KERN_ALERT "dtc: in ieee80211_init, init_debugfs fails\n");
+	}
+
 	return 0;
  err_netdev:
 	rc80211_minstrel_ht_exit();
@@ -1279,6 +1289,9 @@ static int __init ieee80211_init(void)
 
 static void __exit ieee80211_exit(void)
 {
+	//dtc
+	dtc_cleanup_debugfs();
+
 	rc80211_minstrel_ht_exit();
 	rc80211_minstrel_exit();
 
Index: backports-4.14-rc2-1/net/mac80211/Makefile
===================================================================
--- backports-4.14-rc2-1.orig/net/mac80211/Makefile
+++ backports-4.14-rc2-1/net/mac80211/Makefile
@@ -29,7 +29,8 @@ mac80211-y := \
 	chan.o \
 	trace.o mlme.o \
 	tdls.o \
-	ocb.o
+	ocb.o \
+	../dtc/dtc_debugfs.o
 
 mac80211-$(CPTCFG_MAC80211_LEDS) += led.o
 mac80211-$(CPTCFG_MAC80211_DEBUGFS) += \
Index: backports-4.14-rc2-1/net/mac80211/tx.c
===================================================================
--- backports-4.14-rc2-1.orig/net/mac80211/tx.c
+++ backports-4.14-rc2-1/net/mac80211/tx.c
@@ -39,6 +39,11 @@
 #include "wme.h"
 #include "rate.h"
 
+//dtc
+#include "../dtc/dtc_debugfs.h"
+static unsigned int dtcLogTag = DTC_TIME_MAC_SEND;
+static char dtcSendBuf[4];
+
 /* misc utils */
 
 static inline void ieee80211_tx_stats(struct net_device *dev, u32 len)
@@ -3726,6 +3731,15 @@ out:
 netdev_tx_t ieee80211_subif_start_xmit(struct sk_buff *skb,
 				       struct net_device *dev)
 {
+	//dtc
+	if (dtc_debugfs_enable & DTC_ENABLE_UDP &&
+			dtc_debugfs_time_loc & DTC_TIME_MAC_SEND &&
+			((struct iphdr*)skb_network_header(skb))->protocol == IPPROTO_UDP &&
+			dtc_debugfs_target_ip == ((struct iphdr*)skb_network_header(skb))->daddr &&
+			dtc_debugfs_target_port == ((struct udphdr*)skb_transport_header(skb))->dest){
+		dtc_debugfs_log1((u8*)dtc_debugfs_skb_udp_payload(skb), 4);
+	}
+	
 	if (unlikely(ieee80211_multicast_to_unicast(skb, dev))) {
 		struct sk_buff_head queue;
 
Index: backports-4.14-rc2-1/drivers/net/dtc/Makefile
===================================================================
--- /dev/null
+++ backports-4.14-rc2-1/drivers/net/dtc/Makefile
@@ -0,0 +1,2 @@
+
+obj-y += dtc_debugfs.o
Index: backports-4.14-rc2-1/drivers/net/dtc/dtc_debugfs.c
===================================================================
--- /dev/null
+++ backports-4.14-rc2-1/drivers/net/dtc/dtc_debugfs.c
@@ -0,0 +1,324 @@
+#include "dtc_debugfs.h"
+
+/* main directory */
+static struct dentry *main_dir;
+static u8 nLogFile = 0; // how many log files we need
+static u8 ratio_long2int = 0; // 
+static u8 ratio_int2byte = 0;
+static u8 ratio_long2byte = 0; // 
+
+/* enable */
+static struct dentry *file_enable;
+u32 dtc_debugfs_enable = 0;
+
+/* timestamp */
+static struct dentry *file_time_loc;
+u32 dtc_debugfs_time_loc = 0;
+static struct timeval timestamp1; // split, send path? 
+static struct timeval timestamp2; //		recv path?
+
+/* target */
+static struct dentry *file_target;
+static char target_ip_port[24] = "1.1.1.1 1\n";
+u32 dtc_debugfs_target_ip = 0;
+u16 dtc_debugfs_target_port = 0;
+
+/* info */
+static struct dentry *file_info;
+#define INFO_BUF_SIZE   1024
+static u8 info_buf[INFO_BUF_SIZE]; // make it simple, output static info only
+static u64 info_buf_pos = 0;				// otherwise, use log file
+
+/* log1 in binary format */
+static struct dentry *file_log1;
+static const u64 log1_buf_size = 40 * 1024 * 1024; // change this to be big enough
+static u64 log1_buf_pos = 0;
+static struct debugfs_blob_wrapper log1_blob;
+
+/* log2 in binary format */
+static struct dentry *file_log2;
+static const u64 log2_buf_size = 40 * 1024 * 1024; // change this to be big enough
+static u64 log2_buf_pos = 0;
+static struct debugfs_blob_wrapper log2_blob;
+
+/* -------- implementation -------- */
+
+/* ---- info ---- */
+void dtc_debugfs_add_info(char *pInfo){
+	if (info_buf_pos + strlen(pInfo) >= INFO_BUF_SIZE){
+		return; // need improve
+	}
+
+	memcpy(info_buf + info_buf_pos, pInfo, strlen(pInfo));
+	info_buf_pos += strlen(pInfo);
+	return; 
+}
+
+static ssize_t info_read_file(struct file *file, char __user *user_buf,
+        size_t count, loff_t *ppos){
+    /*
+	int buf_len = snprintf(info_buf, INFO_BUF_SIZE, // !!! change INFO_BUF_SIZE correspondingly
+            "HZ: %-4d\n"
+            , HZ);
+	*/
+    return simple_read_from_buffer(user_buf, count, ppos, info_buf, info_buf_pos);
+}
+static struct file_operations info_fops = {
+    .read = info_read_file,
+};
+
+/* ---- target ---- */
+static ssize_t target_read_file(struct file *file, char __user *user_buf,
+        size_t count, loff_t *ppos){
+    return simple_read_from_buffer(user_buf, count, ppos, 
+            target_ip_port, strlen(target_ip_port));
+}
+static ssize_t target_write_file(struct file *file, const char __user *user_buf,
+        size_t count, loff_t *ppos){
+    int i = 0;
+    int substr_index = 0;
+    int sub_ip = 0;
+    u32 ip_temp = 0;
+    u16 port_temp = 0;
+    
+    if (count >= sizeof(target_ip_port)) // length error
+        return -EINVAL;
+    if (simple_write_to_buffer(target_ip_port, sizeof(target_ip_port), 
+                ppos, user_buf, count) != count)
+        return -EINVAL;
+
+    for (i = 0; i < count; i++){
+        if (target_ip_port[i] >= '0' && target_ip_port[i] <= '9'){ // number
+            if (substr_index == 0){
+                sub_ip = 10*sub_ip + (target_ip_port[i]-'0');
+            } else if (substr_index == 1){
+                port_temp = 10*port_temp + (target_ip_port[i]-'0');
+            }
+        } else if (target_ip_port[i] == '.'){ // delimiter in ip
+            ip_temp = (ip_temp << 8) + sub_ip;
+            sub_ip = 0;
+        } else if (target_ip_port[i] == ' '){ // delimiter between ip and port
+            ip_temp = (ip_temp << 8) + sub_ip;
+            sub_ip = 0;
+            substr_index++;
+        }
+    }
+    
+    dtc_debugfs_target_ip = htonl(ip_temp);
+    dtc_debugfs_target_port = htons(port_temp);
+    
+    /* rewind to buffer beginning */
+    if (nLogFile >= 1){
+        log1_buf_pos = 0;
+        log1_blob.size = 0;
+    }
+    if (nLogFile >= 2){
+        log2_buf_pos = 0;
+        log2_blob.size = 0;
+    }
+    
+    return count;
+}
+static struct file_operations target_fops = {
+    .read = target_read_file,
+    .write = target_write_file,
+};
+
+
+
+
+/* initialization */
+int dtc_init_debugfs(char *dirname, int buffer_num){
+    /* main directory */
+    main_dir = debugfs_create_dir(dirname, 0);
+    if (!main_dir){
+        printk(KERN_ALERT "dtc: main dir failed!\n");
+        return -1;
+    }
+    /* enable */
+    file_enable = debugfs_create_u32("enable", 0666, main_dir, 
+            &dtc_debugfs_enable);
+    if (!file_enable){
+        printk(KERN_ALERT "dtc: enable file failed!\n");
+        return -1;
+    }
+    /* timestamp */
+    file_time_loc = debugfs_create_u32("timeLoc", 0666, main_dir,
+            &dtc_debugfs_time_loc);
+    if (!file_time_loc){
+        printk(KERN_ALERT "dtc: timeLoc file failed!\n");
+        return -1;
+    }
+    /* target */
+    file_target = debugfs_create_file("target", 0666, main_dir, NULL,
+            &target_fops);
+    if (!file_target){
+        printk(KERN_ALERT "dtc: target file failed!\n");
+        return -1;
+    }
+    /* info */
+    file_info = debugfs_create_file("info", 04444, main_dir, NULL,
+            &info_fops);
+    if (!file_info){
+        printk(KERN_ALERT "dtc: info file failed!\n");
+        return -1;
+    }
+
+	/* ---- other main initialization --- */
+    nLogFile = buffer_num;
+	ratio_long2int = (u8) (sizeof(long) / sizeof(int));
+	ratio_long2byte = (u8) sizeof(long);
+	ratio_int2byte = sizeof(int);
+
+	/* add info */
+	dtc_debugfs_add_info("HZ=Something\n");
+
+	/* initialize log files at below */
+    if (nLogFile == 0) return 0;
+    
+	/* log1 */
+    log1_blob.data = vmalloc(log1_buf_size);
+    log1_blob.size = 0;
+    file_log1 = debugfs_create_blob("log1", 0444, main_dir,
+            &log1_blob);
+    if (!file_log1){
+        printk(KERN_ALERT "dtc: log1 file failed!\n");
+        return -1;
+    }
+    if (nLogFile == 1) return 0;
+
+    /* log2 */
+    log2_blob.data = vmalloc(log2_buf_size);
+    log2_blob.size = 0;
+    file_log2 = debugfs_create_blob("log2", 0444, main_dir,
+            &log2_blob);
+    if (!file_log2){
+        printk(KERN_ALERT "dtc: log2 file failed!\n");
+        return -1;
+    }
+    if (nLogFile == 2) return 0;
+
+    return 0;
+}
+
+/* destructor */
+void dtc_cleanup_debugfs(void){
+    debugfs_remove_recursive(main_dir);
+    return;
+}
+
+/* log1 */
+// format: length(4) timeval(long+long) data
+void dtc_debugfs_log1(u8 *pData, u32 length){
+	if (log1_buf_pos + length + 4 + 2 * ratio_long2byte // length timeval
+			>= log1_buf_size) return; // run out buffer, simply return, need improve
+	
+	memcpy((u8*)log1_blob.data+log1_buf_pos, &length, 4); // length
+	log1_buf_pos += 4;
+	do_gettimeofday(&timestamp1);
+	memcpy((u8*)log1_blob.data+log1_buf_pos, &timestamp1, 2*ratio_long2byte); // timestamp: 2 long
+	log1_buf_pos += 2*ratio_long2byte;
+	memcpy((u8*)log1_blob.data+log1_buf_pos, pData, length);
+	log1_buf_pos += length;
+	log1_blob.size = log1_buf_pos;
+}
+
+/* log2 */
+// format: length(4) timeval(long+long) data
+void dtc_debugfs_log2(u8 *pData, u32 length){
+	if (log2_buf_pos + length + 4 + 2 * ratio_long2byte // timeval
+			>= log2_buf_size) return; // run out buffer, simply return, need improve
+	
+	memcpy((u8*)log2_blob.data+log2_buf_pos, &length, 4);
+	log2_buf_pos += 4;
+	do_gettimeofday(&timestamp2);
+	memcpy((u8*)log2_blob.data+log2_buf_pos, &timestamp2, 2*ratio_long2byte); // timestamp: 2 long
+	log2_buf_pos += 2*ratio_long2byte;
+	memcpy((u8*)log2_blob.data+log2_buf_pos, pData, length);
+	log2_buf_pos += length;
+	log2_blob.size = log2_buf_pos;
+}
+
+
+/* timestamp1 -> log1 */  
+/*
+#define TIME_MSG_SIZE    (DTC_DEC_32 + 1 + DTC_DEC_64 + 1 + DTC_DEC_64 + 2 )
+static u8 time_msg[TIME_MSG_SIZE];
+static u32 time_msg_len = 0; 
+void dtc_log_time(u32 time_loc){
+    // time_loc time_sec time_usec
+   
+    if (log1_buf_pos + TIME_MSG_SIZE >= log1_buf_size) return;
+
+    do_gettimeofday(&timestamp);
+    time_msg_len = snprintf(time_msg, TIME_MSG_SIZE, "%u %lu %lu\n",
+            time_loc, timestamp.tv_sec, timestamp.tv_usec);
+    memcpy((char*)log1_blob.data+log1_buf_pos, time_msg, time_msg_len);
+    
+    log1_buf_pos += time_msg_len;
+    log1_blob.size = log1_buf_pos;
+    return;
+}
+// append data
+#define U32_MSG_SIZE    ( DTC_DEC_32 + 2 )
+static u8 u32_msg[U32_MSG_SIZE];
+static u32 u32_msg_len; 
+void dtc_log_time_u32(u32 data){
+   if (log1_buf_pos + U32_MSG_SIZE >= log1_buf_size) return;
+    u32_msg_len = snprintf(u32_msg, U32_MSG_SIZE, "%u\n",
+            ntohl(data));
+    memcpy((char*)log1_blob.data+log1_buf_pos, u32_msg, u32_msg_len);
+
+    log1_buf_pos += u32_msg_len;
+    log1_blob.size = log1_buf_pos;
+    return;
+}
+// append data
+#define INT_MSG_SIZE    ( DTC_DEC_32 + 2 )
+static u8 int_msg[INT_MSG_SIZE];
+static u32 int_msg_len;
+void dtc_log_buffer_size(int data){
+    if (log1_buf_pos + INT_MSG_SIZE >= log1_buf_size) return;
+    int_msg_len = snprintf(int_msg, INT_MSG_SIZE, "%u\n",
+            data);
+    memcpy((char*)log1_blob.data+log1_buf_pos, int_msg, int_msg_len);
+
+    log1_buf_pos += int_msg_len;
+    log1_blob.size = log1_buf_pos;
+    return;
+}
+*/
+/* timestamp -> log2 */  
+/*
+#define TIME_MSG2_SIZE    (DTC_DEC_32 + 1 + DTC_DEC_64 + 1 + DTC_DEC_64 + 2 )
+static u8 time_msg2[TIME_MSG2_SIZE];
+static u32 time_msg2_len = 0; 
+void dtc_log2_time(u32 time_loc){
+    // time_loc time_sec time_usec
+   
+    if (log2_buf_pos + TIME_MSG2_SIZE >= log2_buf_size) return;
+
+    do_gettimeofday(&timestamp2);
+    time_msg2_len = snprintf(time_msg2, TIME_MSG2_SIZE, "%u %lu %lu\n",
+            time_loc, timestamp2.tv_sec, timestamp2.tv_usec);
+    memcpy((char*)log2_blob.data+log2_buf_pos, time_msg2, time_msg2_len);
+    
+    log2_buf_pos += time_msg2_len;
+    log2_blob.size = log2_buf_pos;
+    return;
+}
+// append data
+#define U32_MSG2_SIZE    ( DTC_DEC_32 + 2 )
+static u8 u32_msg2[U32_MSG2_SIZE];
+static u32 u32_msg2_len; 
+void dtc_log2_time_u32(u32 data){
+   if (log2_buf_pos + U32_MSG2_SIZE >= log2_buf_size) return;
+    u32_msg2_len = snprintf(u32_msg2, U32_MSG2_SIZE, "%u\n",
+            ntohl(data));
+    memcpy((char*)log2_blob.data+log2_buf_pos, u32_msg2, u32_msg2_len);
+
+    log2_buf_pos += u32_msg2_len;
+    log2_blob.size = log2_buf_pos;
+    return;
+}
+*/
Index: backports-4.14-rc2-1/drivers/net/dtc/dtc_debugfs.h
===================================================================
--- /dev/null
+++ backports-4.14-rc2-1/drivers/net/dtc/dtc_debugfs.h
@@ -0,0 +1,81 @@
+#ifndef _DTC_DEBUGFS_H_
+#define _DTC_DEBUGFS_H_
+
+/* 
+*	Note: Each module/package has its own variable space (they do not share).
+*
+*	Huanle Zhang
+*	www.huanlezhang.com
+*/
+
+#include <linux/debugfs.h>
+#include <linux/kernel.h>
+#include <linux/vmalloc.h>
+#include <linux/fs.h>
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+#include <linux/ip.h>
+#include <linux/string.h>
+#include <linux/timekeeping.h>
+#include <linux/ieee80211.h>
+
+/* enable protocol: up to 32 labels */
+#define DTC_ENABLE_TCP  ( 1 << 0 )
+#define DTC_ENABLE_UDP  ( 1 << 1 )
+
+/* timekeeping location: up to 32 labels */
+#define DTC_TIME_SOCK_SEND	( 1 << (0+0) )
+#define DTC_TIME_SOCK_RECV	( 1 << (16+0) )
+#define DTC_TIME_TCP_SEND	( 1 << (0+1) )
+#define DTC_TIME_TCP_RECV	( 1 << (16+1) )
+#define DTC_TIME_UDP_SEND	( 1 << (0+2) )
+#define DTC_TIME_UDP_RECV	( 1 << (16+2) )
+#define DTC_TIME_MAC_SEND	( 1 << (0+3) )
+#define DTC_TIME_MAC_RECV	( 1 << (16+3) )
+#define DTC_TIME_ATH_SEND	( 1 << (0+4) )
+#define DTC_TIME_ATH_RECV	( 1 << (16+4) )
+#define DTC_TIME_IP_SEND	( 1 << (0+5) )
+#define DTC_TIME_IP_RECV	( 1 << (16+5) )
+
+/* length: decimals to string literals */
+#define DTC_DEC_32  10
+#define DTC_DEC_64  20
+
+/* variables */
+extern u32 dtc_debugfs_enable;		// bind to DTC_ENABLE_
+extern u32 dtc_debugfs_time_loc;	// bind to DTC_TIME_
+extern u32 dtc_debugfs_target_ip;	
+extern u16 dtc_debugfs_target_port;
+
+/* ---- functions ---- */
+
+int dtc_init_debugfs(char *dirname, int buff_num);
+void dtc_cleanup_debugfs(void);
+
+/* 
+	Two logs should be enough without contention. 
+		One for send path
+		The other for receive path
+*/
+void dtc_debugfs_log1(u8 *pData, u32 length);
+void dtc_debugfs_log2(u8 *pData, u32 length);
+
+void dtc_debugfs_add_info(char *pInfo);
+
+/* ---- inline functions ---- */
+
+/* point to udp data payload */
+static inline unsigned char *dtc_debugfs_skb_udp_payload(const struct sk_buff *skb){
+    return skb_transport_header(skb) + 8;
+}
+
+/* is ieee80211 data frame ? */
+static inline int dtc_debugfs_is_ieee80211_data(const struct sk_buff *skb, const __le16 frame_control){
+// udp + ip + ieee80211
+#define MIN_FRAME ( 8 + 20 + 10 )
+    if (skb->data_len < MIN_FRAME ) return 0;
+    return (frame_control & 0x000F) == IEEE80211_FTYPE_DATA;
+}
+
+
+#endif
Index: backports-4.14-rc2-1/drivers/net/wireless/Makefile
===================================================================
--- backports-4.14-rc2-1.orig/drivers/net/wireless/Makefile
+++ backports-4.14-rc2-1/drivers/net/wireless/Makefile
@@ -19,6 +19,9 @@ obj-$(CPTCFG_WLAN_VENDOR_TI) += ti/
 obj-$(CPTCFG_WLAN_VENDOR_ZYDAS) += zydas/
 obj-$(CPTCFG_WLAN_VENDOR_QUANTENNA) += quantenna/
 
+# dtc
+obj-y += ../dtc/ 
+
 # 16-bit wireless PCMCIA client drivers
 #obj-$(CPTCFG_PCMCIA_RAYCS)	+= ray_cs.o
 #obj-$(CPTCFG_PCMCIA_WL3501)	+= wl3501_cs.o
Index: backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/Makefile
===================================================================
--- backports-4.14-rc2-1.orig/drivers/net/wireless/ath/ath10k/Makefile
+++ backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/Makefile
@@ -12,7 +12,8 @@ ath10k_core-y += mac.o \
 		 bmi.o \
 		 hw.o \
 		 p2p.o \
-		 swap.o
+		 swap.o \
+		 ../../../dtc/dtc_debugfs.o 
 
 ath10k_core-$(CPTCFG_ATH10K_DEBUGFS) += spectral.o
 ath10k_core-$(CPTCFG_NL80211_TESTMODE) += testmode.o
Index: backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/core.c
===================================================================
--- backports-4.14-rc2-1.orig/drivers/net/wireless/ath/ath10k/core.c
+++ backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/core.c
@@ -33,6 +33,9 @@
 #include "testmode.h"
 #include "wmi-ops.h"
 
+//dtc
+#include "../../../dtc/dtc_debugfs.h"
+
 unsigned int ath10k_debug_mask;
 static unsigned int ath10k_cryptmode_param;
 static bool uart_print;
@@ -2209,6 +2212,13 @@ int ath10k_core_start(struct ath10k *ar,
 	if (status)
 		goto err_hif_stop;
 
+	//dtc
+	if (dtc_init_debugfs("dtcAth", 2) == 0){
+		printk(KERN_ALERT "dtc: in ath10k_core_start, init_debugfs succeeds\n");
+	} else {
+		printk(KERN_ALERT "dtc: in ath10k_core_start, init_debugfs fails\n");
+	}
+
 	return 0;
 
 err_hif_stop:
@@ -2261,6 +2271,9 @@ void ath10k_core_stop(struct ath10k *ar)
 	ath10k_htt_tx_stop(&ar->htt);
 	ath10k_htt_rx_free(&ar->htt);
 	ath10k_wmi_detach(ar);
+
+	//dtc
+	dtc_cleanup_debugfs();
 }
 EXPORT_SYMBOL(ath10k_core_stop);
 
Index: backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/mac.c
===================================================================
--- backports-4.14-rc2-1.orig/drivers/net/wireless/ath/ath10k/mac.c
+++ backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/mac.c
@@ -33,6 +33,9 @@
 #include "wmi-ops.h"
 #include "wow.h"
 
+//dtc
+#include "../../../dtc/dtc_debugfs.h"
+
 /*********/
 /* Rates */
 /*********/
@@ -3585,6 +3588,15 @@ static int ath10k_mac_tx_submit(struct a
 
 	switch (txpath) {
 	case ATH10K_MAC_TX_HTT:
+
+		// dtc
+		if (dtc_debugfs_enable & DTC_ENABLE_UDP &&
+				dtc_debugfs_time_loc & DTC_TIME_ATH_SEND &&
+				dtc_debugfs_target_ip == ((struct iphdr*)skb_network_header(skb))->daddr &&
+				dtc_debugfs_target_port == ((struct udphdr*)skb_transport_header(skb))->dest){
+			dtc_debugfs_log1((u8*)dtc_debugfs_skb_udp_payload(skb), 4);
+		}
+
 		ret = ath10k_htt_tx(htt, txmode, skb);
 		break;
 	case ATH10K_MAC_TX_HTT_MGMT:
@@ -4193,6 +4205,7 @@ static void ath10k_mac_op_tx(struct ieee
 	bool is_presp;
 	int ret;
 
+
 	ath10k_mac_tx_h_fill_cb(ar, vif, txq, skb);
 
 	txmode = ath10k_mac_tx_h_get_txmode(ar, vif, sta, skb);
@@ -4202,6 +4215,7 @@ static void ath10k_mac_op_tx(struct ieee
 	is_mgmt = (txpath == ATH10K_MAC_TX_HTT_MGMT);
 
 	if (is_htt) {
+		
 		spin_lock_bh(&ar->htt.tx_lock);
 		is_presp = ieee80211_is_probe_resp(hdr->frame_control);
 
Index: backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/htt_rx.c
===================================================================
--- backports-4.14-rc2-1.orig/drivers/net/wireless/ath/ath10k/htt_rx.c
+++ backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/htt_rx.c
@@ -25,6 +25,9 @@
 
 #include <linux/log2.h>
 
+// dtc
+#include "../../../dtc/dtc_debugfs.h"
+
 #define HTT_RX_RING_SIZE HTT_RX_RING_SIZE_MAX
 #define HTT_RX_RING_FILL_LEVEL (((HTT_RX_RING_SIZE) / 2) - 1)
 
Index: backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/txrx.c
===================================================================
--- backports-4.14-rc2-1.orig/drivers/net/wireless/ath/ath10k/txrx.c
+++ backports-4.14-rc2-1/drivers/net/wireless/ath/ath10k/txrx.c
@@ -21,6 +21,9 @@
 #include "mac.h"
 #include "debug.h"
 
+// dtc
+#include "../../../dtc/dtc_debugfs.h"
+
 static void ath10k_report_offchan_tx(struct ath10k *ar, struct sk_buff *skb)
 {
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
@@ -117,6 +120,14 @@ int ath10k_txrx_tx_unref(struct ath10k_h
 	    (info->flags & IEEE80211_TX_CTL_NO_ACK))
 		info->flags |= IEEE80211_TX_STAT_NOACK_TRANSMITTED;
 
+	// dtc
+	if (dtc_debugfs_enable & DTC_ENABLE_UDP &&
+			dtc_debugfs_time_loc & DTC_TIME_ATH_SEND &&
+			dtc_debugfs_target_ip == ((struct iphdr*)skb_network_header(msdu))->daddr &&
+			dtc_debugfs_target_port == ((struct udphdr*)skb_transport_header(msdu))->dest){
+		dtc_debugfs_log2((u8*)dtc_debugfs_skb_udp_payload(msdu), 4);
+	}
+
 	ieee80211_tx_status(htt->ar->hw, msdu);
 	/* we do not own the msdu anymore */
 
